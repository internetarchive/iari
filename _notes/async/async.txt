
# build a list of results from async
results = [item async for item async_iterator]


from chatgpt

import asyncio
import aiohttp

# Define a list of URLs you want to check
urls = [
    "https://example.com",
    "https://www.google.com",
    "https://www.openai.com",
    # Add more URLs here
]

# Function to check the status of a single URL asynchronously
async def check_url_status(url, session):
    try:
        async with session.get(url) as response:
            return f"{url} - Status Code: {response.status}"
    except aiohttp.ClientError as e:
        return f"{url} - Error: {str(e)}"

# Function to check the status of multiple URLs asynchronously
async def check_multiple_urls(urls):
    async with aiohttp.ClientSession() as session:
        tasks = [check_url_status(url, session) for url in urls]
        return await asyncio.gather(*tasks)

# Create an event loop and call the function to check multiple URLs asynchronously
async def main():
    url_statuses = await check_multiple_urls(urls)

    # Print the status of each URL
    for status in url_statuses:
        print(status)

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())





from dennis' all.py

    import asyncio
    import aiohttp
    import requests

    async def check_dois(self, dois: Set[str]):
        async with aiohttp.ClientSession() as session:
            tasks = []
            for doi in dois:
                url = f"http://18.217.22.248/v2/check-doi?doi={self.__quote__(doi)}"
                tasks.append(asyncio.ensure_future(self.fetch_data(session, url)))

            results = await asyncio.gather(*tasks)
            return results

   def __fetch_doi_details__(self):
        from src import app

        if not self.error:
            app.logger.debug("__fetch_doi_details__: running")
            # this code from chatgpt does not work via flask
            # loop = asyncio.get_event_loop()
            # solution from https://techoverflow.net/2020/10/01/how-to-fix-python-asyncio-runtimeerror-there-is-no-current-event-loop-in-thread/
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            self.__extract_dois__()
            if self.dois:
                app.logger.info(f"Checking {len(self.dois)} DOIs")
                self.doi_details = loop.run_until_complete(self.check_dois(self.dois))
            else:
                app.logger.info("Not checking DOIs because none were found")
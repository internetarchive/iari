@startuml
'https://plantuml.com/class-diagram

' We don't include attributes in this diagram because it just clutters
' everything.

package "Base models" {
    abstract class BaseModel
    abstract class WcdBaseModel{
    __log_to_file__()
    }
    BaseModel <|-- WcdBaseModel
    abstract class WcdWikibaseModel {
    setup_wikibase()
    }
    WcdBaseModel <|-- WcdWikibaseModel
}
WcdWikibaseModel <|--- WcdImportBot


package "Cache related" {
    WcdBaseModel <|-- Cache
    WcdBaseModel <|-- SsdbDatabase
    class Cache {
        ssdb
        add_()
        add_reference()
        add_website()
        check__and_get_wikicitations_qid()
        check_reference_and_get_wikicitations_qid()
        check_website_and_get_wikicitations_qid()
        connect()
        delete_key()
        flush_database()
        get_cache_information()
    }

    class SsdbDatabase{
        connection
        host
        port
        connect()
        delete()
        flush_database()
        get_info()
        get_value()
        set_value()
    }
}
class WcdImportBot{
    __flush_cache__()
    __gather_and_print_statistics__()
    __rebuild_cache__()
    __receive_workloads__()
    __setup_argparse_and_return_args__()
    __setup_cache__()
    __setup_wikibase_integrator_configuration__()
    delete_one_page()
    get_and_extract_page_by_title()
    get_and_extract_page_by_wdqid()
    get_and_extract_pages_by_range()
    lookup_md5hash()
    rinse_all_items_and_cache()
    run()
}

package Items {
    abstract class WCDItem
    WcdBaseModel <|-- WCDItem
    WCDItem <|-- WikipediaArticle
    package "Reference related" {
        class EnglishWikipediaReferenceSchema{
        return_object()
        }
        WcdBaseModel <|-- WikipediaReferenceSchema
        WikipediaReferenceSchema <|-- EnglishWikipediaReferenceSchema
        class WikipediaReferenceSchema{
        first_parameter
        second_parameter
        template_name
        }

        WcdBaseModel <|-- Person
        class Person {
        author_name_string
        given
        has_number
        link
        mask
        name_string
        number_in_sequence
        orcid
        role
        surname
        }
        enum EnglishWikipediaTemplatePersonRole {
        AUTHOR
        EDITOR
        HOST
        INTERVIEWER
        TRANSLATOR
        UNKNOWN
        }
        WCDItem <|-- WikipediaReference
        class WikipediaReference {
            __clean_wiki_markup_from_strings__()
            __detect_archive_urls__()
            __detect_google_books_id__()
            __detect_internet_archive_id__()
            __extract_first_level_domain__()
            __find_number__()
            __generate_first_level_domain_hash__()
            __generate_hashes__()
            __generate_reference_hash__()
            __get_first_level_domain__
            __get_numbered_person__()
            __get_numbered_persons__()
            __insert_reference_in_cache__()
            __merge_date_into_publication_date__()
            __merge_lang_into_language__()
            __merge_place_into_location__()
            __parse_first_parameter__()
            __parse_google_books_template__()
            __parse_isbn__()
            __parse_known_role_persons__()
            __parse_persons__()
            __parse_roleless_persons__()
            __parse_urls__()
            __upload_reference_to_wikibase__()
            __validate_time__()
            check_and_upload_reference_item_to_wikibase_if_missing()
            finish_parsing_and_generate_hash()
            get_wcdqid_from_cache()
            has_first_level_domain_url_hash()
            has_hash()
            template_url()
            upload_reference_and_insert_in_the_cache_if_enabled()
            wikibase_url()
        }
    }
    class WikipediaArticle{
        __calculate_hashed_template_distribution__()
        __compare_and_update_all_references__()
        __compare_and_update_page__()
        __compare_data_and_update__()
        __extract_and_parse_references__()
        __fetch_page_data__()
        __fetch_wikidata_qid__()
        __fix_aliases__()
        __fix_class_key__()
        __fix_dash__()
        __fix_keys__()
        __generate_hash__()
        __get_title_from_wikidata__()
        __get_wikipedia_article_from_title__()
        __get_wikipedia_article_from_wdqid__()
        __page_has_already_been_uploaded__()
        __parse_templates__()
        __print_hash_statistics__()
        __upload_page_and_references__()
        __upload_references_and_websites_if_missing__()
        absolute_url()
        extract_and_parse_and_upload_missing_items_to_wikibase()
        is_redirect()
        number_of_hashed_references()
        number_of_references()
        percent_of_references_with_a_hash()
        underscored_title()
        url()
        wikibase_url()
    }

    class Website{
        __insert_website_in_cache__()
        __upload_website_and_insert_in_the_cache__()
        __upload_website_to_wikibase__()
        check_and_upload_website_item_to_wikibase_if_missing()
        get_website_wcdqid_from_cache()
    }
    WCDItem <|- Website
}
class UpdateDelay{
    __delay_time_has_passed__()
    time_to_update()
}
WcdBaseModel <|- UpdateDelay
class Hash_{
    __entity_updated_hash__()
}
WcdBaseModel <|- Hash_
package "Queue related" {
    class Message{
    process_data()
    }
    WcdWikibaseModel <|-- Message
    class WorkQueue{
    __close_connection__()
    __connect__()
    __create_queue__()
    __send_message__()
    __setup_channel__()
    listen_to_queue()
    publish()
    }
    WcdWikibaseModel <|-- WorkQueue
}
package "Wikibase related" {
    class Wikibase {
    __extract_wcdqs_json_entity_id__()
    entity_history_url()
    entity_url()
    extract_item_ids()
    is_valid_qid()
    mediawiki_api_url()
    mediawiki_index_url()
    parse_time_from_claim()
    rdf_entity_prefix()
    rdf_prefix()
    sparql_endpoint_url()
    }
    WcdBaseModel <|-- Wikibase
    class IASandboxWikibase
    Wikibase <|-- IASandboxWikibase
    class WikiCitationsWikibase
    Wikibase <|-- WikiCitationsWikibase
    class WikibaseCrud{
    __extract_item_ids__()
    __extract_item_ids_and_hashes__()
    __extract_wcdqs_json_entity_id__()
    __login_and_prepare_new_item__()
    __prepare_all_person_claims__()
    __prepare_item_citations__()
    __prepare_new_reference_item__()
    __prepare_new_website_item__()
    __prepare_new_wikipedia_article_item__()
    __prepare_person_claims__()
    __prepare_person_qualifiers__()
    __prepare_reference_claim__()
    __prepare_single_value_reference_claims__()
    __prepare_single_value_reference_claims_always_present__()
    __prepare_single_value_reference_claims_with_dates__()
    __prepare_single_value_reference_claims_with_urls__()
    __prepare_single_value_reference_external_identifier_claims__()
    __prepare_single_value_reference_string_claims__()
    __prepare_single_value_website_claims__()
    __prepare_single_value_wikipedia_article_claims__()
    __prepare_string_authors__()
    __prepare_string_citation__()
    __prepare_string_citation_qualifiers__()
    __prepare_string_citations__()
    __prepare_string_editors__()
    __prepare_string_translators__()
    __setup_wikibase_integrator_configuration__()
    __wait_for_wcdqs_to_sync__()
    entity_url()
    prepare_and_upload_reference_item()
    prepare_and_upload_website_item()
    prepare_and_upload_wikipedia_article_item()
    }
    WcdBaseModel <|-- WikibaseCrud
    class WikibaseCrudCreate{
    upload_new_item()
    }
    WikibaseCrud <|-- WikibaseCrudCreate
    class WikibaseCrudDelete{
    __delete_item__()
    __delete_items__()
    delete_imported_items()
    }
    WikibaseCrud <|-- WikibaseCrudDelete
    class WikibaseCrudRead{
    __execute_query__()
    __extract_count_from_first_binding__()
    __get_all_items__()
    __get_all_items_and_hashes__()
    __get_items_via_sparql__()
    __get_statistic__()
    __get_wcdqids_from_hash__()
    get_external_identifier_statistic()
    get_item()
    number_of_pages()
    number_of_references()
    number_of_website_items()
    }
    WikibaseCrud <|-- WikibaseCrudRead
    class WikibaseCrudUpdate{
    __compare_claims_and_upload__()
    __fetch_and_prepare_data_for_comparison__()
    compare_and_update_claims()
    }
    WikibaseCrud <|-- WikibaseCrudUpdate
    class Properties{
    get_all_property_labels()
    get_all_property_names()
    }
    WcdBaseModel <|-- Properties
}
package "Exceptions" {
    class BaseException
    class AmbiguousDateError
    class DebugExit
    class MissingInformationError
    class MoreThanOneNumberError
    class NoChannelError
    class NotLoggedInError
    class TimeParseException
    class WikibaseError
    BaseException <|-- AmbiguousDateError
    BaseException <|-- DebugExit
    BaseException <|-- MissingInformationError
    BaseException <|-- MoreThanOneNumberError
    BaseException <|-- NoChannelError
    BaseException <|-- NotLoggedInError
    BaseException <|-- TimeParseException
    BaseException <|-- WikibaseError
}
package "Recent changes API"{
    class WikimediaEvent{
        domain()
        is_enwiki()
        is_main_namespace()
        language_code()
        publish_to_article_queue()
        url()
    }
    WcdBaseModel <|- WikimediaEvent
    class EventStream {
        __get_events__()
        __reached_max_events__()
        start_consuming()
    }
    WcdBaseModel <|- EventStream
    class Meta
    WcdBaseModel <|- Meta
}

package "WikiCitations API" {
    package "Flask" {
        class Resource
        class Schema
    }
    class AddJobToQueue{
        __parse_into_job__()
        __validate__()
        __validate_and_get_job__()
        get()
    }
    Resource <|-- AddJobToQueue
    class AddJobSchema {
        return_object()
    }
    Schema <|-- AddJobSchema
    enum Return {
        INVALID_QID
        NO_MATCH
        NO_QID
    }
    class Job{
        lang
        site
        testing
        title
   }
   BaseModel <|-- Job
   class LookupByWikidataQid {
        get()
   }
   Resource <|-- LookupByWikidataQid
   class LookupWikicitationsQid {
        __setup_wikibase_integrator_configuration__()
        lookup_via_cirrussearch()
        lookup_via_query_service()
   }
   Resource <|-- LookupWikicitationsQid
   class SendJobToArticleQueue {
        publish_to_article_queue()
   }
   BaseModel <|-- SendJobToArticleQueue
}
@enduml